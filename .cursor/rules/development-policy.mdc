---
description: 
globs: 
alwaysApply: true
---
# 개발 정책 및 가이드라인

## 핵심 개발 원칙

### 1. SOLID 원칙 준수
- **S**ingle Responsibility Principle: 각 클래스와 함수는 하나의 책임만 가져야 함
- **O**pen/Closed Principle: 확장에는 열려있고 수정에는 닫혀있어야 함
- **L**iskov Substitution Principle: 하위 타입은 상위 타입을 대체할 수 있어야 함
- **I**nterface Segregation Principle: 클라이언트는 사용하지 않는 인터페이스에 의존하지 않아야 함
- **D**ependency Inversion Principle: 추상화에 의존해야 하며, 구체화에 의존하면 안됨

### 2. Clean Architecture 적용
- 의존성 규칙: 내부 계층은 외부 계층을 알면 안됨
- 비즈니스 로직과 프레임워크 분리
- 계층별 명확한 책임 분리

### 3. 모듈화 원칙
- 파일과 함수는 최대한 작은 단위로 분할
- 단일 책임 원칙에 따른 모듈 설계
- 재사용 가능한 컴포넌트 작성

## 필수 개발 프로세스 (TDD)

### 1단계: 개발 시작
```
1.1. 테스트 코드 작성 (Red)
     ↓
1.2. 최소한의 코딩 (Green)
     ↓
1.3. 테스트 실행
     ↓
1.4. 테스트 에러 없을 때까지 반복 수정 (Refactor)
```

### 2단계: 태스크 완료 후 통합 테스트
```
2.1. 현재 태스크의 전체 파일 작성 완료
     ↓
2.2. 현재 태스크에 포함된 모든 테스트 진행
     ↓
2.3. 테스트 에러 없을 때까지 반복 수정
```
