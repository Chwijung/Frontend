---
description: 
globs: 
alwaysApply: false
---
# AUTH-001 로그인 페이지 개발 계획

## 구현 항목

### 핵심 기능
- 반드시 .cursor\rules\html_code\index.html 파일의 구조와 css 기능을 모두 구현
- 로그인 폼 컴포넌트 (이메일/비밀번호)
- JWT 토큰 localStorage 저장
- 권한별 라우팅 (관리자/멘토/학생)
- 자동 로그인 유지 기능
- 로그인 실패 에러 처리

### 관련 파일
- 참조 HTML: [index.html](mdc:index.html)
- 기술 스택: [tech-stack.mdc](mdc:.cursor/rules/tech-stack.mdc)
- 개발 정책: [development-policy.mdc](mdc:.cursor/rules/development-policy.mdc)
- 개발 태스크: [development-task.mdc](mdc:.cursor/rules/development-task.mdc)

## 개발 계획

### 1단계: 테스트 코드 작성 (Red)
1. 로그인 폼 렌더링 테스트
2. 이메일/비밀번호 입력 필드 테스트
3. 폼 검증 로직 테스트
4. 로그인 API 호출 테스트
5. JWT 토큰 저장 테스트
6. 권한별 리다이렉션 테스트
7. 자동 로그인 테스트
8. 에러 처리 테스트

### 2단계: 최소한의 구현 (Green)
1. LoginForm 컴포넌트 생성
2. 입력 필드 컴포넌트 구현
3. 폼 검증 훅 구현
4. 인증 API 서비스 구현
5. 토큰 관리 유틸리티 구현
6. 라우팅 가드 구현
7. 자동 로그인 로직 구현
8. 에러 핸들링 구현

### 3단계: 리팩토링 (Refactor)
1. React 19 useActionState 적용
2. useFormStatus를 활용한 로딩 상태 개선
3. TanStack Query를 활용한 인증 상태 관리
4. 컴포넌트 분리 및 재사용성 향상
5. 접근성 개선
6. 성능 최적화

### 4단계: 통합 테스트
1. 전체 로그인 플로우 테스트
2. 다양한 사용자 권한 시나리오 테스트
3. 에러 케이스 통합 테스트
4. 브라우저 호환성 테스트

## 기술 적용 사항

### React 19 Features
- useActionState를 활용한 폼 상태 관리
- useFormStatus를 통한 제출 상태 표시
- 새로운 form action prop 활용

### TanStack Query v5
- 인증 상태 캐싱 및 동기화
- 토큰 갱신 자동 처리
- 로그인 요청 상태 관리

### 보안 고려사항
- JWT 토큰 안전한 저장
- CSRF 보호
- 입력 값 검증 및 Sanitization
- 브루트 포스 공격 방지

## 테스트 전략
- 단위 테스트: 각 컴포넌트 및 유틸리티 함수
- 통합 테스트: 로그인 플로우 전체
- E2E 테스트: 실제 사용자 시나리오
- 접근성 테스트: 스크린 리더 호환성

